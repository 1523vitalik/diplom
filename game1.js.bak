// Определение уровней игры
const levels = [
  {
    tableNames: ['SELECT', 'DISTINCT','FROM','WHERE','ORDER BY','ASC','DESC','BETWEEN','NOT','AND','OR','IN','LIKE','NULL'],
    tableNames2: ['_','%','=','<>','>','>=','<','<=','*'],
    tableNames3: ['persons','full_name','country','birth_date'],
    question:'Вывести все личные данные создателей фильмов',
    instruction:'Результат запроса должен содержать все данные таблицы persons',
    sqlQuery: 'SELECT * FROM persons',
    image:'img/answar_1.png',
    type:'I.Простые запросы на выборку данных'
  },
  
    {
    tableNames: ['SELECT', 'DISTINCT','FROM','WHERE','ORDER BY','ASC','DESC','BETWEEN','NOT','AND','OR','IN','LIKE','NULL'],
    tableNames2: ['_','%','=','<>','>','>=','<','<=','*',','],
    tableNames3: ['persons','full_name','country','birth_date','movies','year','movies',],
    question:'Вывести в алфавитном порядке список всех фильмов и годы их выхода на экран.',
    instruction:'Результат запроса должен содержать название фильма и год выхода на экран.',
    sqlQuery: 'SELECT movie , year FROM movies ORDER BY movie',
    image:'img/answar_2.png',
    type:'I.Простые запросы на выборку данных'
  },
  
    {
    tableNames: ['SELECT', 'DISTINCT','FROM','WHERE','ORDER BY','ASC','DESC','BETWEEN','NOT','AND','OR','IN','LIKE','NULL'],
    tableNames2: ['_','%','=','<>','>','>=','<','<=','*'],
    tableNames3: ['persons','full_name','country','birth_date'],
    question:'Найти фильмы, которые вышли на экраны после 1999 года, и вывести их в хронологическом порядке.',
    instruction:'Использовать сравнение. Результат запроса должен содержать название фильма, год выхода на экран, страну производства фильма.',
    sqlQuery: 'SELECT movie, year, country FROM movies WHERE year > 1999 ORDER BY year',
    image:'img/answar_3.png',
    type:'I.Простые запросы на выборку данных'
  },
  
    {
    tableNames: ['SELECT', 'DISTINCT','FROM','WHERE','ORDER BY','ASC','DESC','BETWEEN','NOT','AND','OR','IN','LIKE','NULL'],
    tableNames2: ['_','%','=','<>','>','>=','<','<=','*'],
    tableNames3: ['persons','full_name','country','birth_date'],
    question:'Вывести все личные данные создателей фильмов',
    instruction:'Результат запроса должен содержать все данные таблицы persons',
    sqlQuery: 'SELECT * FROM persons',
    image:'img/answar_4.png',
    type:'I.Простые запросы на выборку данных'
  },
  
    {
    tableNames: ['SELECT', 'DISTINCT','FROM','WHERE','ORDER BY','ASC','DESC','BETWEEN','NOT','AND','OR','IN','LIKE','NULL'],
    tableNames2: ['_','%','=','<>','>','>=','<','<=','*'],
    tableNames3: ['persons','full_name','country','birth_date'],
    question:'Вывести все личные данные создателей фильмов',
    instruction:'Результат запроса должен содержать все данные таблицы persons',
    sqlQuery: 'SELECT * FROM persons',
    image:'img/answar_5.png',
    type:'I.Простые запросы на выборку данных'
  },
  
    {
    tableNames: ['SELECT', 'DISTINCT','FROM','WHERE','ORDER BY','ASC','DESC','BETWEEN','NOT','AND','OR','IN','LIKE','NULL'],
    tableNames2: ['_','%','=','<>','>','>=','<','<=','*'],
    tableNames3: ['persons','full_name','country','birth_date'],
    question:'Вывести все личные данные создателей фильмов',
    instruction:'Результат запроса должен содержать все данные таблицы persons',
    sqlQuery: 'SELECT * FROM persons',
    image:'img/answar_6.png',
    type:'I.Простые запросы на выборку данных'
  },
  
    {
    tableNames: ['SELECT', 'DISTINCT','FROM','WHERE','ORDER BY','ASC','DESC','BETWEEN','NOT','AND','OR','IN','LIKE','NULL'],
    tableNames2: ['_','%','=','<>','>','>=','<','<=','*'],
    tableNames3: ['persons','full_name','country','birth_date'],
    question:'Вывести все личные данные создателей фильмов',
    instruction:'Результат запроса должен содержать все данные таблицы persons',
    sqlQuery: 'SELECT * FROM persons',
    image:'img/answar_7.png',
    type:'I.Простые запросы на выборку данных'
  },
  
    {
    tableNames: ['SELECT', 'DISTINCT','FROM','WHERE','ORDER BY','ASC','DESC','BETWEEN','NOT','AND','OR','IN','LIKE','NULL'],
    tableNames2: ['_','%','=','<>','>','>=','<','<=','*'],
    tableNames3: ['persons','full_name','country','birth_date'],
    question:'Вывести все личные данные создателей фильмов',
    instruction:'Результат запроса должен содержать все данные таблицы persons',
    sqlQuery: 'SELECT * FROM persons',
    image:'img/answar_8.png',
    type:'II.Выборка данных из нескольких таблиц'
  },
  
    {
    tableNames: ['SELECT', 'DISTINCT','FROM','WHERE','ORDER BY','ASC','DESC','BETWEEN','NOT','AND','OR','IN','LIKE','NULL'],
    tableNames2: ['_','%','=','<>','>','>=','<','<=','*'],
    tableNames3: ['persons','full_name','country','birth_date'],
    question:'Вывести все личные данные создателей фильмов',
    instruction:'Результат запроса должен содержать все данные таблицы persons',
    sqlQuery: 'SELECT * FROM persons',
    image:'img/answar_9.png',
    type:'II.Выборка данных из нескольких таблиц'
  },
  
    {
    tableNames: ['SELECT', 'DISTINCT','FROM','WHERE','ORDER BY','ASC','DESC','BETWEEN','NOT','AND','OR','IN','LIKE','NULL'],
    tableNames2: ['_','%','=','<>','>','>=','<','<=','*'],
    tableNames3: ['persons','full_name','country','birth_date'],
    question:'Вывести все личные данные создателей фильмов',
    instruction:'Результат запроса должен содержать все данные таблицы persons',
    sqlQuery: 'SELECT * FROM persons',
    image:'img/answar_10.png',
    type:'II.Выборка данных из нескольких таблиц'
  },
    {
    tableNames: ['SELECT', 'DISTINCT','FROM','WHERE','ORDER BY','ASC','DESC','BETWEEN','NOT','AND','OR','IN','LIKE','NULL'],
    tableNames2: ['_','%','=','<>','>','>=','<','<=','*'],
    tableNames3: ['persons','full_name','country','birth_date'],
    question:'Вывести все личные данные создателей фильмов',
    instruction:'Результат запроса должен содержать все данные таблицы persons',
    sqlQuery: 'SELECT * FROM persons',
    image:'img/answar_11.png',
    type:'II.Выборка данных из нескольких таблиц'
  },
  
];

let currentLevelIndex = 0;

function renderLevel(level) {
  const tableNames = level.tableNames;
  const tableNames2 = level.tableNames2;
  const tableNames3 = level.tableNames3;
  const board = $('.board');
  const list1 = $('<ul>').addClass('list1');
  const list2 = $('<ul>').addClass('list2');
  const list3 = $('<ul>').addClass('list3');

  $.each(tableNames, function(index, tableName) {
    const list1Item = $('<li>').text(tableName);
    list1.append(list1Item);

    list1Item.draggable({
      revert: 'invalid',
      helper: 'clone'
    });
  });
  $.each(tableNames2, function(index, tableName2) {
    const list2Item = $('<li>').text(tableName2);
    list2.append(list2Item);

    list2Item.draggable({
      revert: 'invalid',
      helper: 'clone'
    });
  });
  
  $.each(tableNames3, function(index, tableName3) {
    const list3Item = $('<li>').text(tableName3);
    list3.append(list3Item);

    list3Item.draggable({
      revert: 'invalid',
      helper: 'clone'
    });
  });

  board.droppable({
    drop: function (event, ui) {
      const tableName = $(ui.draggable[0]).text();
      const queryInput = $(this).find('input');

      const currentValue = queryInput.val();
      if (currentValue === '') {
        queryInput.val(tableName);
      } else {
        queryInput.val(currentValue + ' ' + tableName);
      }
    }
  });
  board.droppable({
    drop: function (event, ui) {
      const tableName2 = $(ui.draggable[0]).text();
      const queryInput = $(this).find('input');

      const currentValue = queryInput.val();
      if (currentValue === '') {
        queryInput.val(tableName2);
      } else {
        queryInput.val(currentValue + ' ' + tableName2);
      }
    }
  });
  board.droppable({
    drop: function (event, ui) {
      const tableName3 = $(ui.draggable[0]).text();
      const queryInput = $(this).find('input');

      const currentValue = queryInput.val();
      if (currentValue === '') {
        queryInput.val(tableName3);
      } else {
        queryInput.val(currentValue + ' ' + tableName3);
      }
    }
  });

  const inputContainer = $('<div>');
  const inputLabel = $('<label>').text('');
  const queryInput = $('<input>').prop('type', 'text');

  inputContainer.append(inputLabel, queryInput);
  board.append(`<h3>${level.type}</h3>`);
  board.append(`<h3>Задание №${currentLevelIndex + 1}</h3>`);
  board.append(`<p><strong>${level.question}</strong></p>`);
  board.append(`<p>Примечание. ${level.instruction}</p>`);
  board.append(list1, list2, list3, inputContainer);
  board.append(`<button id="submit-button">Проверить результат</button>`);
  
  
  $('#submit-button').on('click', function () {
    const input = $('input[type="text"]').val();
    const modal = $('#myModal');
    const modalTitle = $('.modal-title');
    const modalBody = $('.modal-body');
    let isAnswerCorrect = false;
  
    if (input === level.sqlQuery) {
      modalTitle.text('Правильный ответ!');
      modalBody.html(`<img src="img/yes.gif">`);
      isAnswerCorrect = true;
    } else {
      modalTitle.text('Неправильный ответ! Попробуйте еще раз.');
      modalBody.html(`<img src="img/no.gif">`);
    }
    modal.show();
    setTimeout(() => {
      modal.hide();
    if (isAnswerCorrect) {
      const img = $('<img>').prop('src', level.image).attr('alt', `Картинка для задания ${currentLevelIndex + 1}`);
      board.empty().append(img);
      board.append(`<h3 id="style-text">Результат выполнения запроса по заданию №${currentLevelIndex + 1}</h3>`);

        setTimeout(() => {
          const button = $('<button id="submit-button">').text('Следующий уровень');
          board.find('#submit-button').off('click').remove(); 
          board.append(button);
          button.on('click', function() {
            if (currentLevelIndex < levels.length - 1) {
              currentLevelIndex++;
              board.empty();
              renderLevel(levels[currentLevelIndex]);
            } else {
              alert('Вы прошли все уровни!');
            }
          });
        },2000);
      };
},2000);
 })
}
renderLevel(levels[currentLevelIndex]);



//function showAllLevels() {
//  const levelButtonsContainer = $('#level-buttons-container');
//  levelButtonsContainer.empty();

//  for (let i = 0; i < levels.length; i++) {
//    const button = $(`<button class="level-button" data-level-index="${i}">${i + 1}</button>`);
//    levelButtonsContainer.append(button);
// }
//}
//$('level-button').on('click', function(event) {

//    currentLevelIndex = event.target.data(level-index);
//    showLevel(currentLevelIndex);
//});


//function showLevel(level) {
//  const board = $('.board');
//  board.empty();
//}
//showAllLevels();
//showLevel(levels[currentLevelIndex]);